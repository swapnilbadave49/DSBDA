package ProgramsDemo;

import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class billConsumption {
	
public static void main(String [] args) throws Exception
{
	Configuration c=new Configuration();
	String[] files=new GenericOptionsParser(c,args).getRemainingArgs();
	Path input=new Path(files[0]);
	Path output=new Path(files[1]);
	Job j=new Job(c,"wordcount");
	j.setJarByClass(WordCount.class);
	j.setMapperClass(MapForWordCount.class);
	j.setReducerClass(ReduceForWordCount.class);
	j.setOutputKeyClass(Text.class);
	j.setOutputValueClass(IntWritable.class);
	FileInputFormat.addInputPath(j, input);
	FileOutputFormat.setOutputPath(j, output);
	System.exit(j.waitForCompletion(true)?0:1);
}
public static class MapForWordCount extends Mapper<LongWritable, Text, Text, IntWritable>{
	public void map(LongWritable key, Text value, Context con) throws IOException, InterruptedException
	{
		String allLines = value.toString() ;
		String[] lines = allLines.split("\n") ;
		for(int i=0;i<lines.length;i++){
			String[] words = lines[i].split(",") ;
			String year = words[0] ;
			Text outputKey = new Text(year.toUpperCase().trim());
			for(int j=1;j<words.length;j++){
				IntWritable outputValue = new IntWritable(Integer.parseInt(words[j]));
				con.write(outputKey, outputValue);
			}
		}

	}
}

public static class ReduceForWordCount extends Reducer<Text, IntWritable, Text, IntWritable>
{
	int flag = 0 ;
	public void reduce(Text word, Iterable<IntWritable> values, Context con) throws IOException, InterruptedException
	{
		int max = 0;
		if(flag == 0){
			con.write(new Text("year \t month \t max \t") , new IntWritable()) ;
			flag ++ ;
		}
		int i=0 , maxi = 0  ;
		String[] months = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
		for(IntWritable value : values)
		{	
			i ++ ;
			if(value.get()>max){
			max = value.get();
			maxi = i ;
			}
		}
		Text output = new Text(word + "\t" + months[maxi]) ;
		con.write(output,new IntWritable(max));
}

}

}
